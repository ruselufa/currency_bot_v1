// import { Injectable, Logger } from '@nestjs/common';
// import * as TelegramBot from 'node-telegram-bot-api';
// import axios from 'axios';
// import { Cron, CronExpression } from '@nestjs/schedule';
// import { ConfigService } from '@nestjs/config';
// import { ICurrencyBotOptions } from './currencybot.inteface';
// import { getTelegramConfig } from 'src/configs/telegram.config';

// @Injectable()
// export class CurrencybotService {
// 	private readonly logger = new Logger(CurrencybotService.name);
// 	private readonly telegramConfig: ICurrencyBotOptions;
// 	private readonly bot: TelegramBot;

// 	constructor(private readonly configService: ConfigService) {
// 		// –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_TELEGRAM_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
// 		this.telegramConfig = getTelegramConfig(configService);
// 		this.bot = new TelegramBot(this.telegramConfig.token, { polling: true });
// 	}

// 	async getCurrencyRates(): Promise<{ [key: string]: number }> {
// 		try {
// 			// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
// 			const response = await axios.get('https://api.exchangerate-api.com/v4/latest/RUB');
// 			const rates = response.data.rates;

// 			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã
// 			rates.USD_inverse = (1 / rates.USD).toFixed(2);
// 			rates.EUR_inverse = (1 / rates.EUR).toFixed(2);

// 			// –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞)
// 			const bitcoinRateResponse = await axios.get(
// 				'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd',
// 			);
// 			const bitcoinRate = bitcoinRateResponse.data.bitcoin.usd; // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –∫ –¥–æ–ª–ª–∞—Ä—É
// 			rates.BTC = Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(
// 				bitcoinRate,
// 			); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –∫ –¥–æ–ª–ª–∞—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –∫ –∫—É—Ä—Å–∞–º –¥–æ–ª–ª–∞—Ä–∞ –∏ –µ–≤—Ä–æbitcoinRate;

// 			return rates;
// 		} catch (error) {
// 			this.logger.error('Error fetching currency rates:', error);
// 			throw error;
// 		}
// 	}

// 	@Cron(CronExpression.EVERY_30_MINUTES)
// 	async hadleCron() {
// 		await this.updatePinnedMessage();
// 	}

// 	async updatePinnedMessage() {
// 		try {
// 			const rates = await this.getCurrencyRates();
// 			console.log('ratesUSD ', rates.USD_inverse);
// 			console.log('ratesEUR ', rates.EUR_inverse);
// 			console.log('ratesBTC ', rates.BTC);

// 			// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
// 			const messageText = `
//                 üíµ USD: ${rates.USD_inverse} ‚ÇΩ |
// üí∂ EUR: ${rates.EUR_inverse} ‚ÇΩ |
// ‚Çø BTC: ${rates.BTC}
//             `;

// 			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ
// 			const chatId = this.telegramConfig.chatId; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
// 			const pinnedMessageId = this.telegramConfig.pinnedMessageId; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
// 			await this.bot.editMessageText(messageText, {
// 				chat_id: chatId,
// 				message_id: pinnedMessageId,
// 				parse_mode: 'HTML', // –£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç HTML —Ä–∞–∑–º–µ—Ç–∫—É
// 			});

// 			this.logger.log('Pinned message updated successfully');
// 		} catch (error) {
// 			this.logger.error('Error updating pinned message:', error);
// 		}
// 	}
// }
import { Injectable, Logger } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import { Cron, CronExpression } from '@nestjs/schedule';
import { ConfigService } from '@nestjs/config';
import { ICurrencyBotOptions } from './currencybot.inteface';
import { getTelegramConfig } from 'src/configs/telegram.config';

@Injectable()
export class CurrencybotService {
	private readonly logger = new Logger(CurrencybotService.name);
	private readonly telegramConfig: ICurrencyBotOptions;
	private readonly bot: TelegramBot;

	constructor(private readonly configService: ConfigService) {
		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Telegram –∏–∑ ConfigService
		this.telegramConfig = getTelegramConfig(configService);
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
		this.bot = new TelegramBot(this.telegramConfig.token, { polling: true });
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
	async getCurrencyRates(): Promise<{ [key: string]: number }> {
		try {
			// –ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å –≤–Ω–µ—à–Ω–µ–≥–æ API
			const response = await axios.get('https://api.exchangerate-api.com/v4/latest/RUB');
			const rates = response.data.rates;

			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –¥–ª—è USD –∏ EUR
			rates.USD_inverse = (1 / rates.USD).toFixed(2);
			rates.EUR_inverse = (1 / rates.EUR).toFixed(2);

			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞ –∫ –¥–æ–ª–ª–∞—Ä—É
			const bitcoinRateResponse = await axios.get(
				'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd',
			);
			const bitcoinRate = bitcoinRateResponse.data.bitcoin.usd;
			rates.BTC = Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(
				bitcoinRate,
			);

			return rates;
		} catch (error) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
			this.logger.error('Error fetching currency rates:', error);
			throw error;
		}
	}

	// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ cron
	@Cron(CronExpression.EVERY_30_MINUTES)
	async handleCron() {
		await this.updatePinnedMessage();
	}

	// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª–µ
	async updatePinnedMessage() {
		try {
			// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
			const rates = await this.getCurrencyRates();

			// –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
			const messageText = `
                üíµ USD: ${rates.USD_inverse} ‚ÇΩ |
üí∂ EUR: ${rates.EUR_inverse} ‚ÇΩ |
ü•á BTC: ${rates.BTC} |
            `;

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
			const chatId = this.telegramConfig.chatId; // ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
			const pinnedMessageId = this.telegramConfig.pinnedMessageId; // ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			await this.bot.editMessageText(messageText, {
				chat_id: chatId,
				message_id: pinnedMessageId,
				parse_mode: 'HTML', // –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
			});

			this.logger.log('Pinned message updated successfully');
		} catch (error) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			this.logger.error('Error updating pinned message:', error);
		}
	}
}
